{"version":3,"sources":["utils/event.js","context/theme-context.js","Test.jsx","App.jsx","serviceWorker.js","index.js"],"names":["EVENTS","REFRESH","DISPLAY_ERROR","HIDE_ERROR","SET_THEME","events","Object","values","forEach","event","ThemeContext","createContext","theme","i","Test","forwardRef","ref","text","number","Math","random","useImperativeHandle","getData","App","useState","setTheme","useEffect","changeTheme","eventName","callback","callbacks","indexOf","push","addEventListener","callbackIndex","splice","removeEventListener","ref1","useRef","ref2","printData","useCallback","console","log","current","Provider","value","className","onClick","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6OAAMA,G,KAAS,CACXC,QAAS,UACTC,cAAe,eACfC,WAAY,YACZC,UAAW,aAETC,EAAS,GACfC,OAAOC,OAAOP,GAAQQ,SAAQ,SAACC,GAC3BJ,EAAOI,GAAS,MAEpB,ICTMC,EAAeC,wBAAc,CAACC,MAAO,SAG5BF,ICHXG,G,MAAI,GAkBOC,EAjBFC,sBAAW,WAASC,GAAS,IAAhBC,EAAe,EAAfA,KAChBC,EAASC,KAAKC,SAMpB,OALAC,8BAAoBL,GAAK,iBAAO,CAC5BM,QAAS,WACL,OAAOJ,OAGP,6BAAMD,EACbC,EACD,6BAECL,SCuDUU,MA1Df,WAAgB,IAAD,EACaC,mBFTC,QEQd,mBACNZ,EADM,KACCa,EADD,KAEbC,qBAAU,WACR,IAAMC,EAAc,SAACf,GFVE,UEWjBA,IACFA,EFbqB,QEevBa,EAASb,IAGX,OHFqB,SAACgB,EAAWC,GACjC,IAAMC,EAAYzB,EAAOuB,GACrBE,GAAaA,EAAUC,QAAQF,GAAY,GAC3CC,EAAUE,KAAKH,GGFnBI,CAAiBjC,EAAOI,UAAWuB,GAC5B,YHIiB,SAACC,EAAWC,GACpC,IAAMC,EAAYzB,EAAOuB,GACzB,GAAIE,EAAW,CACX,IAAMI,EAAgBJ,EAAUC,QAAQF,GACpCK,GAAiB,GACjBJ,EAAUK,OAAOD,EAAe,IGRtCE,CAAoBpC,EAAOI,UAAWuB,MAEvC,CAACF,IAEJ,IAAMY,EAAOC,mBACPC,EAAOD,mBAEPE,EAAYC,uBAAa,WAC7BC,QAAQC,IAAIN,EAAKO,QAAQtB,WACzBoB,QAAQC,IAAIJ,EAAKK,QAAQtB,aAEtB,CAACe,EAAME,IAGZ,OADAG,QAAQC,IAAI,iBAEV,kBAAC,EAAaE,SAAd,CAAuBC,MAAO,CAAClC,UAC7B,yBAAKmC,UAAS,UAAKnC,EA5BJ,SA4BD,SACZ,gCACI,yCAEJ,sCAGE,kBAAC,EAAD,CAAMK,KAAK,IAAID,IAAKqB,IACpB,kBAAC,EAAD,CAAMpB,KAAK,IAAID,IAAKuB,IACpB,4BAAQS,QAASR,KAEnB,gCACI,wBAAIO,UAAU,wBACV,oDACA,wBAAIA,UAAU,mBACd,4BACI,0CACA,uBAAGE,KAAK,sCAAR,gCAEJ,wBAAIF,UAAU,mBACd,4BACE,2CACA,uBAAGE,KAAK,sBAAR,gBC/CEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.f08c3fe0.chunk.js","sourcesContent":["const EVENTS = {\n    REFRESH: \"refresh\",\n    DISPLAY_ERROR: \"displayError\",\n    HIDE_ERROR: \"hideError\",\n    SET_THEME: \"setTheme\"\n};\nconst events = {};\nObject.values(EVENTS).forEach((event) => {\n    events[event] = [];\n});\nconst dispatch = (eventName, params) => {\n    const callbacks = events[eventName];\n    if (callbacks) {\n        for (let callback of callbacks) {\n            callback(params);\n        }\n    }\n};\nconst addEventListener = (eventName, callback) => {\n    const callbacks = events[eventName];\n    if (callbacks && callbacks.indexOf(callback) < 0) {\n        callbacks.push(callback);\n    }\n};\nconst removeEventListener = (eventName, callback) => {\n    const callbacks = events[eventName];\n    if (callbacks) {\n        const callbackIndex = callbacks.indexOf(callback);\n        if (callbackIndex > -1) {\n            callbacks.splice(callbackIndex, 1);\n        }\n    }\n};\n\nexport { EVENTS, addEventListener, removeEventListener, dispatch };","import {createContext} from \"react\";\nconst ThemeContext = createContext({theme: \"dark\"});\nexport const DEFAULT_THEME = \"dark\";\nexport const LIGHT_THEME = \"light\";\nexport default ThemeContext;\n","import React, { useState, useEffect, forwardRef, useRef, useImperativeHandle, ref  } from 'react';\nlet i = 0;\nconst Test = forwardRef(({text}, ref) => {\n    const number = Math.random();\n    useImperativeHandle(ref, () => ({\n        getData: () => {\n            return number;\n        }\n    }));\n    return (<div>{text}\n    {number}\n    <div>\n\n    {i++}\n    </div>\n    </div>)\n\n});\n\nexport default Test;","import React, { useState, useEffect, useRef, useCallback }  from 'react';\n\nimport { EVENTS, addEventListener, removeEventListener } from './utils/event';\nimport ThemeContext, {DEFAULT_THEME, LIGHT_THEME} from \"./context/theme-context\";\n\nimport './App.css';\nimport Test from \"./Test\";\n// import Main from \"./pages/Main\";\n\nconst THEME_SUFFIX = \"-theme\";\nfunction App() {\n  const [theme, setTheme] = useState(DEFAULT_THEME);\n  useEffect(() => {\n    const changeTheme = (theme) => {\n      if (theme !== LIGHT_THEME) {\n        theme = DEFAULT_THEME;\n      }\n      setTheme(theme);\n    };\n    addEventListener(EVENTS.SET_THEME, changeTheme);\n    return () => {\n      removeEventListener(EVENTS.SET_THEME, changeTheme);\n    };\n  }, [setTheme]);\n\n  const ref1 = useRef();\n  const ref2 = useRef();\n  // ususeCallback []);\n  const printData = useCallback( () => {\n    console.log(ref1.current.getData());\n    console.log(ref2.current.getData());\n\n    }, [ref1, ref2],\n  )\n  console.log(\"Render parent\");\n  return (\n    <ThemeContext.Provider value={{theme}}>\n      <div className={`${theme+THEME_SUFFIX} App`}>\n        <header>\n            <h2>TODO APP</h2>\n        </header>\n        <main>\n            hello\n          {/* <Main></Main> */}\n          <Test text=\"a\" ref={ref1}></Test>\n          <Test text=\"b\" ref={ref2}></Test>\n          <button onClick={printData}></button>\n        </main>\n        <footer>\n            <ul className=\"footer-personal-info\">\n                <li>Â© 2020 Yiji Huang</li>\n                <li className=\"footer-divider\"></li>\n                <li>\n                    <span>E-mail: </span>\n                    <a href=\"mailto:huang.yiji@northeastern.edu\">huang.yiji@northeastern.edu</a>\n                </li>\n                <li className=\"footer-divider\"></li>\n                <li>\n                  <span>Icons by </span>\n                  <a href=\"https://icons8.com\">Icons8</a>\n                </li>\n            </ul>\n        </footer>\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}