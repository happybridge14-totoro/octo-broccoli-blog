{"version":3,"sources":["utils/event.js","theme-context.js","utils/error-status.js","utils/proxy.js","pages/Login.jsx","pages/User-action.jsx","pages/Item-action.jsx","pages/Todo.jsx","pages/Error-message.jsx","pages/Main.jsx","App.jsx","serviceWorker.js","index.js"],"names":["EVENTS","REFRESH","DISPLAY_ERROR","HIDE_ERROR","SET_THEME","events","Object","values","forEach","event","dispatch","eventName","params","callbacks","callback","addEventListener","indexOf","push","removeEventListener","callbackIndex","splice","ThemeContext","createContext","theme","STATUS_CODES","ERROR_TYPE","api","METHOD","GET","PUT","DELETE","POST","method","param","toLowerCase","url","content","headers","body","JSON","stringify","query","entries","map","key","value","encodeURIComponent","join","fetch","catch","Promise","reject","ok","status","then","response","json","Login","memo","useState","username","setUsername","keyPressHandler","useCallback","target","signin","preventDefault","post","className","id","type","onChange","minLength","onClick","UserActions","storedTheme","useContext","setTheme","useEffect","changeTheme","targetTheme","put","logout","delete","finally","name","checked","htmlFor","ItemActions","refreshItems","addItem","deleteAll","newItem","setNewItem","handleInput","handleAdd","Todo","tasksURL","useMemo","filterShowDone","setFilterShowDone","order","setOrder","itemsReducer","state","action","items","newState","Error","useReducer","dispatchItems","task","done","timestamp","Date","now","taskId","data","get","handleCheck","item","urlWithId","handleDelete","handleTextChange","renderItems","itemsToRender","filter","sort","a","b","localeCompare","e","ErrorMessage","errorText","setErrorText","displayError","errorType","message","getErrorMessage","hideError","Main","userName","refreshPage","App","Provider","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.a8087260.chunk.js","sourcesContent":["const EVENTS = {\n    REFRESH: \"refresh\",\n    DISPLAY_ERROR: \"displayError\",\n    HIDE_ERROR: \"hideError\",\n    SET_THEME: \"setTheme\"\n};\nconst events = {};\nObject.values(EVENTS).forEach((event) => {\n    events[event] = [];\n});\nconst dispatch = (eventName, params) => {\n    const callbacks = events[eventName];\n    if (callbacks) {\n        for (let callback of callbacks) {\n            callback(params);\n        }\n    }\n};\nconst addEventListener = (eventName, callback) => {\n    const callbacks = events[eventName];\n    if (callbacks && callbacks.indexOf(callback) < 0) {\n        callbacks.push(callback);\n    }\n};\nconst removeEventListener = (eventName, callback) => {\n    const callbacks = events[eventName];\n    if (callbacks) {\n        const callbackIndex = callbacks.indexOf(callback);\n        if (callbackIndex > -1) {\n            callbacks.splice(callbackIndex, 1);\n        }\n    }\n};\n\nexport { EVENTS, addEventListener, removeEventListener, dispatch };","import {createContext} from \"react\";\nconst ThemeContext = createContext({theme: \"dark\"});\nexport const DEFAULT_THEME = \"dark\";\nexport const LIGHT_THEME = \"light\";\nexport default ThemeContext;\n","export const STATUS_CODES = {\n    \"SUCCESS\": 200,\n    \"BAD_RQUEST\": 400,\n    \"UNAUTHORIZED\": 401,\n    \"FORBIDDEN\": 403,\n    \"NOT_FOUND\": 404,\n    \"DUPLICATED\": 409,\n    \"INTERNAL_SERVER_ERROR\": 500,\n    \"NETWORK_ERROR\": 503\n};\nexport const ERROR_TYPE = {\n    USER_NAME_ERROR: 0,\n    NETWORK_ERROR: 1,\n    RECIPE_ID_ERROR: 2,\n    SESSION_ERROR: 3,\n    TASK_PARAM_ERROR: 4,\n    UNEXPECTED_ERROR: 5,\n};","import {STATUS_CODES} from \"./error-status\";\nconst api = {};\nconst METHOD = {\n    GET: \"get\",\n    PUT: \"put\",\n    DELETE: \"delete\",\n    POST: \"post\",\n};\nObject.values(METHOD).forEach((method) => {\n    const param = {\n        method\n    };\n    api[method.toLowerCase()] = (url, content) => {\n        if (content) {\n            if (method !== METHOD.GET) {\n                param.headers = { 'Content-Type': 'application/json' };\n                param.body = JSON.stringify(content);\n            } else {\n                const query = Object.entries(content).map(([key, value]) => {\n                    return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n                }).join(\"&\");\n                url = url + (query === \"\" ? \"\" : \"?\" + query);\n            }\n        }\n        return fetch(url, param).catch(()=>{\n            return Promise.reject({\n                ok: false,\n                status: STATUS_CODES.NETWORK_ERROR\n            });\n        }).then((response)=>{\n            if (response.ok) {\n                return response.json();\n            } else {\n                return Promise.reject(response);\n            }\n        });\n    };\n});\nexport default api;","import React, {useState, memo, useCallback} from \"react\";\n\nimport { ERROR_TYPE, STATUS_CODES} from \"../utils/error-status\";\nimport {EVENTS, dispatch} from \"../utils/event\";\nimport api from \"../utils/proxy\";\n\nconst LOGIN_IN_URL = \"/session\";\nconst Login = memo(() => {\n    const [username, setUsername] = useState(\"\");\n    const keyPressHandler = useCallback((event)=>{\n        const value = event.target.value;\n        setUsername(value);\n    }, [setUsername]);\n    const signin = useCallback((event) => {\n        event.preventDefault();\n        api.post(LOGIN_IN_URL, {username}).then(()=>{\n            setUsername(\"\");\n            dispatch(EVENTS.REFRESH);\n        }).catch((response) => {\n            setUsername(\"\");\n            if (response.status === STATUS_CODES.UNAUTHORIZED || response.status === STATUS_CODES.FORBIDDEN) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.SESSION_ERROR);\n            } else if (response.status === STATUS_CODES.NETWORK_ERROR) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.NETWORK_ERROR);\n            }\n        });\n    }, [username, setUsername]);\n    return (\n        <div className=\"login-page\">\n            <label>\n                User Name:\n                <input id=\"user-name\" type=\"text\" value={username} onChange={keyPressHandler} minLength={1}/>\n            </label>\n            <button className=\"signin\" onClick={signin}>submit</button>\n        </div>\n    );\n});\nexport default Login;","import React, {useState, memo, useCallback, useEffect, useContext} from \"react\";\n\nimport ThemeContext, {DEFAULT_THEME, LIGHT_THEME} from \"../theme-context\";\nimport { STATUS_CODES, ERROR_TYPE } from \"../utils/error-status\";\nimport api from \"../utils/proxy\";\n\nimport {EVENTS, dispatch} from \"../utils/event\";\n\nconst SIGN_OUT_URL = \"session\";\nconst THEME_URL = \"/theme/\";\n\nconst UserActions = memo(({username}) => {\n    const storedTheme = useContext(ThemeContext);\n    const [theme, setTheme] = useState(storedTheme.theme);\n    useEffect(() => {\n        setTheme(storedTheme.theme);\n    }, [storedTheme])\n    const changeTheme = useCallback((targetTheme) => {\n        api.put(THEME_URL + username, {theme: targetTheme}).then(() => {\n            setTheme(targetTheme);\n            dispatch(EVENTS.SET_THEME, targetTheme);\n        }).catch((response)=>{\n            if (response.status === STATUS_CODES.BAD_RQUEST) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.NETWORK_ERROR);\n            } else if (response.status === STATUS_CODES.FORBIDDEN || response.status === STATUS_CODES.UNAUTHORIZED) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.SESSION_ERROR);\n                dispatch(EVENTS.REFRESH);\n            }\n        });\n    }, [username, setTheme])\n    const logout = useCallback(()=>{\n        api.delete(SIGN_OUT_URL).finally(()=>{\n            dispatch(EVENTS.REFRESH);\n        });\n    }, []);\n    return (\n        <div className=\"user-action\">\n            <span>Theme:</span>\n            <input type=\"radio\" \n                name=\"theme\" \n                value={DEFAULT_THEME}\n                id=\"default\"\n                onChange={()=>{changeTheme(DEFAULT_THEME);}}\n                checked={theme===DEFAULT_THEME}/>\n            <label htmlFor=\"default\">{DEFAULT_THEME}</label>\n            <input type=\"radio\" \n                name=\"theme\" \n                value={LIGHT_THEME}\n                id=\"light\"\n                onChange={()=>{changeTheme(LIGHT_THEME);}}\n                checked={theme===LIGHT_THEME}/>\n            <label htmlFor=\"light\">{LIGHT_THEME}</label>\n            <button onClick={logout} className=\"logout\">Logout</button>\n        </div>\n    );\n});\n\nexport default UserActions;","import React, {useState, memo, useCallback} from \"react\";\n\nconst ItemActions = memo(({refreshItems, addItem, deleteAll}) => {\n    const [newItem, setNewItem] = useState(\"\");\n    const handleInput = useCallback((event) => {\n        const value = event.target.value;\n        setNewItem(value);\n    }, [])\n    const handleAdd = useCallback(() => {\n        addItem(newItem).finally(()=>{\n            setNewItem(\"\");\n        });\n    }, [addItem, newItem]);\n    return (\n        <div className=\"new-item\">\n            <span>New item:</span>\n            <input type=\"text\"\n                minLength={1}\n                value={newItem}\n                onChange={handleInput}\n            />\n            <button onClick={handleAdd} className=\"add\">Add</button>\n            <button onClick={deleteAll} className=\"delete-all\">Delete All</button>\n            <button onClick={refreshItems} className=\"refresh\">Refresh</button>\n        </div>\n    );\n});\n\nexport default ItemActions;","import React, {useState, memo, useEffect, useCallback, useReducer, useMemo} from \"react\";\n\nimport {EVENTS, dispatch} from \"../utils/event\";\nimport {ERROR_TYPE, STATUS_CODES} from \"../utils/error-status\";\nimport api from \"../utils/proxy\";\n\nimport UserActions from \"./User-action\";\nimport ItemActions from \"./Item-action\";\n\nconst TASK_URL = \"/tasks/\";\nconst TYPE_ADD = \"add\";\nconst TYPE_UPDATE = \"update\";\nconst TYPE_REFRESH = \"refresh\";\nconst TYPE_REMOVE = \"remove\";\n\nconst ORDER_DEFAULT = \"none\";\nconst ORDER_ASC = \"asc\";\nconst ORDER_DESC = \"desc\";\n\nconst Todo = memo(({username}) => {\n    const tasksURL = useMemo(() => TASK_URL + username, [username])\n    const [filterShowDone, setFilterShowDone] = useState(true);\n    const [order, setOrder] = useState(ORDER_DEFAULT);\n    const itemsReducer = useCallback((state, action) => {\n        const items = action.items;\n        let newState = {};\n        switch (action.type) {\n            case TYPE_ADD:\n            case TYPE_UPDATE:\n                newState = {...state, ...items};\n                break;\n            case TYPE_REFRESH:\n                newState = items;\n                break;\n            case TYPE_REMOVE:\n                const id = action.id;\n                newState = {...state};\n                delete newState[id];\n                break;\n            default:\n                throw new Error();\n        }\n        return newState;\n    }, []);\n    const [items, dispatchItems] = useReducer(itemsReducer, {});\n    const addItem = useCallback((newItem) => {\n        const task = {\n            content: newItem,\n            done: false,\n            timestamp: Date.now()\n        };\n        return api.post(tasksURL, {task}).then(({data})=>{\n            const {taskId} = data;\n            return api.get(tasksURL + \"/\" + taskId);\n        }).then(({data})=>{\n            const {taskId} = data;\n            const items = {\n                [taskId]: data\n            };\n            dispatch(EVENTS.HIDE_ERROR);\n            dispatchItems({type: TYPE_ADD, items});\n        }).catch((response)=>{\n            if (response.status === STATUS_CODES.UNAUTHORIZED || response.status === STATUS_CODES.FORBIDDEN) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.SESSION_ERROR);\n                dispatch(EVENTS.REFRESH);\n            } else if (response.status === STATUS_CODES.NETWORK_ERROR) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.NETWORK_ERROR);\n            } else if (response.status === STATUS_CODES.BAD_RQUEST || response.status === STATUS_CODES.NOT_FOUND) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.TASK_PARAM_ERROR);\n            }\n        });\n    }, [tasksURL]);\n\n    const refreshItems = useCallback(() => {\n        api.get(tasksURL).then(({data}) => {\n            dispatch(EVENTS.HIDE_ERROR);\n            dispatchItems({type: TYPE_REFRESH, items: data});\n        }).catch((response) => {\n            if (response.status === STATUS_CODES.UNAUTHORIZED || response.status === STATUS_CODES.FORBIDDEN) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.SESSION_ERROR);\n                dispatch(EVENTS.REFRESH);\n            } else if (response.status === STATUS_CODES.NETWORK_ERROR) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.NETWORK_ERROR);\n            } else if (response.status === STATUS_CODES.BAD_RQUEST || response.status === STATUS_CODES.NOT_FOUND) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.TASK_PARAM_ERROR);\n            }\n        });\n    }, [tasksURL]);\n\n    const deleteAll = useCallback(()=>{\n        api.delete(tasksURL).then(()=>{\n            refreshItems();\n        }).catch((response) => {\n            if (response.status === STATUS_CODES.UNAUTHORIZED || response.status === STATUS_CODES.FORBIDDEN) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.SESSION_ERROR);\n                dispatch(EVENTS.REFRESH);\n            } else if (response.status === STATUS_CODES.NETWORK_ERROR) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.NETWORK_ERROR);\n            } else if (response.status === STATUS_CODES.BAD_RQUEST || response.status === STATUS_CODES.NOT_FOUND) {\n                // Do nothing here\n                // dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.TASK_PARAM_ERROR);\n            }\n        });\n    }, [tasksURL, refreshItems]);\n\n    const handleCheck = useCallback((done, item) => {\n        const urlWithId = tasksURL + \"/\" + item.taskId;\n        const newItem = {...item, done};\n        api.put(urlWithId, {task: newItem}).then(()=>{\n            dispatch(EVENTS.HIDE_ERROR);\n            dispatchItems({type: TYPE_UPDATE, items:{[item.taskId]: newItem}});\n        }).catch((response)=>{\n            if (response.status === STATUS_CODES.UNAUTHORIZED || response.status === STATUS_CODES.FORBIDDEN) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.SESSION_ERROR);\n                dispatch(EVENTS.REFRESH);\n            } else if (response.status === STATUS_CODES.NETWORK_ERROR) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.NETWORK_ERROR);\n            } else if (response.status === STATUS_CODES.BAD_RQUEST || response.status === STATUS_CODES.NOT_FOUND) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.TASK_PARAM_ERROR);\n            }\n        });\n    }, [tasksURL]);\n\n    const handleDelete = useCallback((id)=>{\n        const urlWithId = tasksURL + \"/\" + id;\n        api.delete(urlWithId).then(()=>{\n            dispatchItems({type: TYPE_REMOVE, id});\n        }).catch((response) => {\n            if (response.status === STATUS_CODES.UNAUTHORIZED || response.status === STATUS_CODES.FORBIDDEN) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.SESSION_ERROR);\n                dispatch(EVENTS.REFRESH);\n            } else if (response.status === STATUS_CODES.NETWORK_ERROR) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.NETWORK_ERROR);\n            } else if (response.status === STATUS_CODES.BAD_RQUEST || response.status === STATUS_CODES.NOT_FOUND) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.TASK_PARAM_ERROR);\n            }\n        });\n    }, [tasksURL]);\n\n    const handleTextChange = useCallback((content, item) => {\n        const urlWithId = tasksURL + \"/\" + item.taskId;\n        const newItem = {...item, content};\n        api.put(urlWithId, {task: newItem}).then(()=>{\n            dispatch(EVENTS.HIDE_ERROR);\n            dispatchItems({type: TYPE_UPDATE, items:{[item.taskId]: newItem}});\n        }).catch((response)=>{\n            if (response.status === STATUS_CODES.UNAUTHORIZED || response.status === STATUS_CODES.FORBIDDEN) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.SESSION_ERROR);\n                dispatch(EVENTS.REFRESH);\n            } else if (response.status === STATUS_CODES.NETWORK_ERROR) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.NETWORK_ERROR);\n            } else if (response.status === STATUS_CODES.BAD_RQUEST || response.status === STATUS_CODES.NOT_FOUND) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.TASK_PARAM_ERROR);\n            }\n        });\n\n    }, [tasksURL]);\n\n    useEffect(()=>{\n        refreshItems();\n    }, [refreshItems]);\n \n    const renderItems = useCallback(() => {\n        let itemsToRender = Object.values(items);\n        if (!filterShowDone) {\n            itemsToRender = itemsToRender.filter((item)=>{\n                return !item.done;\n            });\n        }\n        switch (order) {\n            case ORDER_ASC:\n                itemsToRender.sort((a, b) => a.content.localeCompare(b.content))\n                break;\n            case ORDER_DESC:\n                itemsToRender.sort((a, b) => b.content.localeCompare(a.content));\n                break;\n            default:\n                itemsToRender.sort((a, b)=>(b.timestamp - a.timestamp));\n                break;\n        }\n        return itemsToRender.map((item) => {\n            return (<div key={item.taskId} className=\"item\">\n                <input type=\"checkbox\" checked={item.done} onChange={(e)=>{handleCheck(e.target.checked, item)}}/>\n                <input type=\"text\" onChange={(e)=>{handleTextChange(e.target.value, item)}} value={item.content} className={item.done ? \"done item-detail\" : \"item-detail\"}/>\n                <button onClick={()=>{handleDelete(item.taskId)}} className=\"delete\">delete</button>\n            </div>);\n        });\n    }, [items, handleCheck, handleDelete, handleTextChange, filterShowDone, order]);\n\n    return (\n        <div>\n            <div className=\"options\">\n                <div className=\"filters\">\n                    <label htmlFor=\"filter\">Hide done tasks:</label>\n                    <input id=\"filter\" name=\"filter\" type=\"checkbox\" checked={!filterShowDone} onChange={(e)=>setFilterShowDone(!e.target.checked)}/>\n                </div>\n                <div className=\"orders\">\n                    <span>Order:</span>\n                    <input type=\"radio\" id=\"none\" name=\"order\" value=\"none\" checked={order === ORDER_DEFAULT} onChange={()=>setOrder(ORDER_DEFAULT)}/>\n                    <label htmlFor=\"none\">Latest</label>\n                    <input type=\"radio\" id=\"asc\" name=\"order\" value=\"asc\" checked={order === ORDER_ASC} onChange={()=>setOrder(ORDER_ASC)}/>\n                    <label htmlFor=\"asc\">A-Z</label>\n                    <input type=\"radio\" id=\"desc\" name=\"order\" value=\"desc\" checked={order === ORDER_DESC} onChange={()=>setOrder(ORDER_DESC)}/>\n                    <label htmlFor=\"desc\">Z-A</label>\n                </div>\n            </div>\n            <div className=\"items\">\n                {renderItems()}\n            </div>\n            <ItemActions deleteAll={deleteAll} refreshItems={refreshItems} addItem={addItem}></ItemActions>\n            <UserActions username={username}></UserActions>\n        </div>\n    );\n});\n\nexport default Todo;","import React, {useState, memo, useEffect} from \"react\";\n\nimport {EVENTS, addEventListener, removeEventListener} from \"../utils/event\";\nimport {ERROR_TYPE} from \"../utils/error-status\";\n\nconst getErrorMessage = (type) => {\n    let message = \"\";\n    switch(type) {\n        case ERROR_TYPE.USER_NAME_ERROR:\n            message = \"User name is not valid!\";\n            break;\n        case ERROR_TYPE.NETWORK_ERROR:\n            message = \"Unable to connect to server! Please try again!\";\n            break;\n        case ERROR_TYPE.RECIPE_ID_ERROR:\n            message = \"Wrong recipe id!\";\n            break;\n        case ERROR_TYPE.SESSION_ERROR:\n            message = \"Invalid user! Please login again!\";\n            break;\n        case ERROR_TYPE.TASK_PARAM_ERROR:\n            message = \"Param error!\";\n            break;\n        case ERROR_TYPE.UNEXPECTED_ERROR:\n        default:\n            message = \"Something went wrong!\"\n            break;\n    }\n    return message;\n};\n\nconst ErrorMessage = memo(() => {\n    const [errorText, setErrorText] = useState(\"\");\n    useEffect(() => {\n        const displayError = (errorType) => {\n            setErrorText(getErrorMessage(errorType));\n        };\n        const hideError = () => {\n            setErrorText(\"\");\n        };\n        addEventListener(EVENTS.DISPLAY_ERROR, displayError);\n        addEventListener(EVENTS.HIDE_ERROR, hideError);\n        return ()=>{\n            removeEventListener(EVENTS.DISPLAY_ERROR, displayError);\n            removeEventListener(EVENTS.HIDE_ERROR, hideError);\n        };\n    }, []);\n\n    return (\n        <div className={`error ${errorText === \"\" ? \"\" : \"display\"}`}>\n            {errorText}\n        </div>\n    );\n});\n\nexport default ErrorMessage;","import React, {useState, memo, useEffect, useCallback} from \"react\";\n\nimport { EVENTS, addEventListener, removeEventListener, dispatch } from \"../utils/event\"\nimport { ERROR_TYPE, STATUS_CODES } from \"../utils/error-status\";\nimport api from \"../utils/proxy\";\n\nimport { DEFAULT_THEME } from \"../theme-context\";\n\nimport Login from \"./Login\";\nimport Todo from \"./Todo\";\nimport ErrorMessage from \"./Error-message\";\n\nconst SESSION_URL = \"/session\";\n\nconst Main = memo(() => {\n    const [userName, setUsername] = useState(\"\");\n    const refreshPage = useCallback(() => {\n        api.get(SESSION_URL).then(({data})=>{\n            const {username, theme} = data;\n            setUsername(username);\n            dispatch(EVENTS.HIDE_ERROR);\n            dispatch(EVENTS.SET_THEME, theme);\n        }).catch((response) => {\n            setUsername(\"\");\n            if (response.status !== STATUS_CODES.UNAUTHORIZED) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.NETWORK_ERROR);\n            }\n            dispatch(EVENTS.SET_THEME, DEFAULT_THEME);\n        });\n        }, [setUsername]);\n    useEffect(() => {\n        refreshPage();\n        addEventListener(EVENTS.REFRESH, refreshPage);\n        return () => {\n            removeEventListener(EVENTS.REFRESH, refreshPage);\n        };\n    }, [refreshPage])\n    return (<div id=\"stage\">\n        <ErrorMessage></ErrorMessage>\n        {userName === \"\" ? <Login></Login> : <Todo username={userName}></Todo>}\n    </div>);\n});\n\nexport default Main;","import React, { useState, useEffect }  from 'react';\n\nimport { EVENTS, addEventListener, removeEventListener } from './utils/event';\nimport ThemeContext, {DEFAULT_THEME, LIGHT_THEME} from \"./theme-context\";\n\nimport './App.css';\nimport Main from \"./pages/Main\";\n\nconst THEME_SUFFIX = \"-theme\";\nfunction App() {\n  const [theme, setTheme] = useState(DEFAULT_THEME);\n  useEffect(() => {\n    const changeTheme = (theme) => {\n      if (theme !== LIGHT_THEME) {\n        theme = DEFAULT_THEME;\n      }\n      setTheme(theme);\n    };\n    addEventListener(EVENTS.SET_THEME, changeTheme);\n    return () => {\n      removeEventListener(EVENTS.SET_THEME, changeTheme);\n    };\n  }, [setTheme])\n  return (\n    <ThemeContext.Provider value={{theme}}>\n      <div className={`${theme+THEME_SUFFIX} App`}>\n        <header>\n            <h2>TODO APP</h2>\n        </header>\n        <main>\n          <Main></Main>\n        </main>\n        <footer>\n            <ul className=\"footer-personal-info\">\n                <li>© 2020 Yiji Huang</li>\n                <li className=\"footer-divider\"></li>\n                <li>\n                    <span>E-mail: </span>\n                    <a href=\"mailto:huang.yiji@northeastern.edu\">huang.yiji@northeastern.edu</a>\n                </li>\n            </ul>\n        </footer>\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}