{"version":3,"sources":["utils/event.js","utils/error-status.js","proxy.js","pages/Error-message.jsx","pages/Login.jsx","theme-context.js","pages/User-action.jsx","pages/Item-action.jsx","pages/Todo.jsx","pages/Main.jsx","App.jsx","serviceWorker.js","index.js"],"names":["EVENTS","REFRESH","DISPLAY_ERROR","HIDE_ERROR","SET_THEME","events","Object","values","forEach","event","dispatch","eventName","params","callbacks","callback","addEventListener","indexOf","push","removeEventListener","callbackIndex","splice","STATUS_CODES","api","METHOD","GET","PUT","DELETE","POST","method","param","toLowerCase","url","content","headers","body","JSON","stringify","query","entries","map","key","value","encodeURIComponent","join","fetch","catch","Promise","reject","ok","status","then","response","json","ERROR_TYPE","ErrorMessage","memo","useState","errorText","setErrorText","useEffect","displayError","errorType","console","log","type","message","getErrorMessage","hideError","className","Login","username","setUsername","keyPressHandler","useCallback","target","signin","preventDefault","post","id","onChange","minLength","onClick","ThemeContext","createContext","theme","UserActions","storedTheme","useContext","setTheme","changeTheme","targetTheme","put","logout","delete","finally","name","checked","htmlFor","ItemActions","refreshItems","addItem","newItem","setNewItem","handleInput","handleAdd","Todo","tasksURL","useMemo","filterShowDone","setFilterShowDone","order","setOrder","itemsReducer","state","action","items","newState","Error","useReducer","dispatchItems","task","done","timestamp","Date","now","taskId","data","get","handleCheck","item","urlWithId","handleDelete","handleTextChange","handleOrderChange","renderItems","itemsToRender","filter","sort","a","b","localeCompare","e","Main","userName","refreshPage","App","Provider","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.afcb2b9b.chunk.js","sourcesContent":["const EVENTS = {\n    REFRESH: \"refresh\",\n    DISPLAY_ERROR: \"displayError\",\n    HIDE_ERROR: \"hideError\",\n    SET_THEME: \"setTheme\"\n};\nconst events = {};\nObject.values(EVENTS).forEach((event) => {\n    events[event] = [];\n});\nconst dispatch = (eventName, params) => {\n    const callbacks = events[eventName];\n    if (callbacks) {\n        for (let callback of callbacks) {\n            callback(params);\n        }\n    }\n};\nconst addEventListener = (eventName, callback) => {\n    const callbacks = events[eventName];\n    if (callbacks && callbacks.indexOf(callback) < 0) {\n        callbacks.push(callback);\n    }\n};\nconst removeEventListener = (eventName, callback) => {\n    const callbacks = events[eventName];\n    if (callbacks) {\n        const callbackIndex = callbacks.indexOf(callback);\n        if (callbackIndex > -1) {\n            callbacks.splice(callbackIndex, 1);\n        }\n    }\n};\n\nexport { EVENTS, addEventListener, removeEventListener, dispatch };","export const ERROR_CODES = {\n    \"WRONG_USER_ID\": 3,\n    \"WRONG_USER_NAME\": 4,\n    \"SESSION_NOT_FOUND\": 5,\n    \"WRONG_SESSION\": 6,\n    \"ITEM_ID_ERROR\": 10,\n    \"ITEM_NAME_ERROR\": 11,\n    \"ITEM_QUANTITY_ERROR\": 12,\n    \"ITEM_DULPLICATED\": 15,\n    \"NOT_FOUND\": 1000 \n};\nexport const STATUS_CODES = {\n    \"SUCCESS\": 200,\n    \"BAD_RQUEST\": 400,\n    \"UNAUTHORIZED\": 401,\n    \"FORBIDDEN\": 403,\n    \"NOT_FOUND\": 404,\n    \"DUPLICATED\": 409,\n    \"INTERNAL_SERVER_ERROR\": 500,\n    \"NETWORK_ERROR\": 503\n};","import {STATUS_CODES} from \"./utils/error-status\";\nconst api = {};\nconst METHOD = {\n    GET: \"get\",\n    PUT: \"put\",\n    DELETE: \"delete\",\n    POST: \"post\",\n};\nObject.values(METHOD).forEach((method) => {\n    const param = {\n        method\n    };\n    api[method.toLowerCase()] = (url, content) => {\n        if (content) {\n            if (method !== METHOD.GET) {\n                param.headers = { 'Content-Type': 'application/json' };\n                param.body = JSON.stringify(content);\n            } else {\n                const query = Object.entries(content).map(([key, value]) => {\n                    return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n                }).join(\"&\");\n                url = url + (query === \"\" ? \"\" : \"?\" + query);\n            }\n        }\n        return fetch(url, param).catch(()=>{\n            return Promise.reject({\n                ok: false,\n                status: STATUS_CODES.NETWORK_ERROR\n            });\n        }).then((response)=>{\n            if (response.ok) {\n                return response.json();\n            } else {\n                return Promise.reject(response);\n            }\n        });\n    };\n});\nexport default api;","import React, {useState, memo, useEffect} from \"react\";\nimport {EVENTS, addEventListener, removeEventListener} from \"../utils/event\";\n\nexport const ERROR_TYPE = {\n    USER_NAME_ERROR: 0,\n    NETWORK_ERROR: 1,\n    RECIPE_ID_ERROR: 2,\n    SESSION_ERROR: 3,\n    TASK_PARAM_ERROR: 4,\n    UNEXPECTED_ERROR: 5,\n};\nconst getErrorMessage = (type) => {\n    let message = \"\";\n    switch(type) {\n        case ERROR_TYPE.USER_NAME_ERROR:\n            message = \"User name is not valid!\";\n            break;\n        case ERROR_TYPE.NETWORK_ERROR:\n            message = \"Unable to connect to server! Please try again!\";\n            break;\n        case ERROR_TYPE.RECIPE_ID_ERROR:\n            message = \"Wrong recipe id!\";\n            break;\n        case ERROR_TYPE.SESSION_ERROR:\n            message = \"Invalid user! Please login again!\";\n            break;\n        case ERROR_TYPE.TASK_PARAM_ERROR:\n            message = \"Param error!\";\n            break;\n        case ERROR_TYPE.UNEXPECTED_ERROR:\n        default:\n            message = \"Something went wrong!\"\n            break;\n    }\n    return message;\n};\n\nconst ErrorMessage = memo(() => {\n    const [errorText, setErrorText] = useState(\"\");\n    useEffect(() => {\n        const displayError = (errorType) => {\n            console.log(\"here?\");\n            setErrorText(getErrorMessage(errorType));\n        };\n        const hideError = () => {\n            console.log(\"hide?\");\n            setErrorText(\"\");\n        };\n        addEventListener(EVENTS.DISPLAY_ERROR, displayError);\n        addEventListener(EVENTS.HIDE_ERROR, hideError);\n        return ()=>{\n            removeEventListener(EVENTS.DISPLAY_ERROR, displayError);\n            removeEventListener(EVENTS.HIDE_ERROR, hideError);\n        };\n    }, []);\n\n    return (\n        <div className={`error ${errorText === \"\" ? \"\" : \"display\"}`}>\n            {errorText}\n        </div>\n    );\n});\n\nexport default ErrorMessage;","import React, {useState, memo, useCallback} from \"react\";\n\nimport { STATUS_CODES} from \"../utils/error-status\";\nimport {EVENTS, dispatch} from \"../utils/event\";\nimport {ERROR_TYPE} from \"./Error-message\";\nimport api from \"../proxy\";\n\nconst LOGIN_IN_URL = \"/session\";\nconst Login = memo(() => {\n    const [username, setUsername] = useState(\"\");\n    const keyPressHandler = useCallback((event)=>{\n        const value = event.target.value;\n        setUsername(value);\n    }, [setUsername]);\n    const signin = useCallback((event) => {\n        event.preventDefault();\n        api.post(LOGIN_IN_URL, {username}).then(()=>{\n            setUsername(\"\");\n            dispatch(EVENTS.REFRESH);\n        }).catch((response) => {\n            setUsername(\"\");\n            if (response.status === STATUS_CODES.UNAUTHORIZED || response.status === STATUS_CODES.FORBIDDEN) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.SESSION_ERROR);\n            } else if (response.status === STATUS_CODES.NETWORK_ERROR) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.NETWORK_ERROR);\n            }\n        });\n    }, [username, setUsername]);\n    return (\n        <div className=\"login-page\">\n            <label>\n                User Name:\n                <input id=\"user-name\" type=\"text\" value={username} onChange={keyPressHandler} minLength={1}/>\n            </label>\n            <button className=\"signin\" onClick={signin}>submit</button>\n        </div>\n    );\n});\nexport default Login;","import {createContext} from \"react\";\nconst ThemeContext = createContext({theme: \"dark\"});\nexport const DEFAULT_THEME = \"dark\";\nexport const LIGHT_THEME = \"light\";\nexport default ThemeContext;\n","import React, {useState, memo, useCallback, useEffect} from \"react\";\nimport {EVENTS, dispatch} from \"../utils/event\";\nimport ThemeContext, {DEFAULT_THEME, LIGHT_THEME} from \"../theme-context\";\nimport { useContext } from \"react\";\nimport api from \"../proxy\";\nimport { STATUS_CODES } from \"../utils/error-status\";\nimport { ERROR_TYPE } from \"./Error-message\";\n\nconst SIGN_OUT_URL = \"session\";\nconst THEME_URL = \"/theme/\";\n\nconst UserActions = memo(({username}) => {\n    const storedTheme = useContext(ThemeContext);\n    const [theme, setTheme] = useState(storedTheme.theme);\n    useEffect(() => {\n        setTheme(storedTheme.theme);\n    }, [storedTheme])\n    const changeTheme = useCallback((targetTheme) => {\n        api.put(THEME_URL + username, {theme: targetTheme}).then(() => {\n            setTheme(targetTheme);\n            dispatch(EVENTS.SET_THEME, targetTheme);\n        }).catch((response)=>{\n            if (response.status === STATUS_CODES.BAD_RQUEST) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.NETWORK_ERROR);\n            } else if (response.status === STATUS_CODES.FORBIDDEN || response.status === STATUS_CODES.UNAUTHORIZED) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.SESSION_ERROR);\n                dispatch(EVENTS.REFRESH);\n            }\n        });\n    }, [username, setTheme])\n    const logout = useCallback(()=>{\n        api.delete(SIGN_OUT_URL).finally(()=>{\n            dispatch(EVENTS.REFRESH);\n        });\n    }, []);\n    return (\n        <div className=\"user-action\">\n            <span>Theme:</span>\n            <input type=\"radio\" \n                name=\"theme\" \n                value={DEFAULT_THEME}\n                id=\"default\"\n                onChange={()=>{changeTheme(DEFAULT_THEME);}}\n                checked={theme===DEFAULT_THEME}/>\n            <label htmlFor=\"default\">{DEFAULT_THEME}</label>\n            <input type=\"radio\" \n                name=\"theme\" \n                value={LIGHT_THEME}\n                id=\"light\"\n                onChange={()=>{changeTheme(LIGHT_THEME);}}\n                checked={theme===LIGHT_THEME}/>\n            <label htmlFor=\"light\">{LIGHT_THEME}</label>\n            <button onClick={logout} className=\"logout\">Logout</button>\n        </div>\n    );\n});\n\nexport default UserActions;","import React, {useState, memo, useCallback} from \"react\";\n\nconst ItemActions = memo(({refreshItems, addItem}) => {\n    const [newItem, setNewItem] = useState(\"\");\n    const handleInput = useCallback((event) => {\n        const value = event.target.value;\n        setNewItem(value);\n    }, [])\n    const handleAdd = useCallback(() => {\n        addItem(newItem).finally(()=>{\n            setNewItem(\"\");\n        });\n    }, [addItem, newItem]);\n    return (\n        <div className=\"new-item\">\n            <span>New item:</span>\n            <input type=\"text\"\n                minLength={1}\n                value={newItem}\n                onChange={handleInput}\n            />\n            <button onClick={handleAdd}>Add</button>\n            <button onClick={refreshItems} className=\"refresh\">Refresh</button>\n        </div>\n    );\n});\n\nexport default ItemActions;","import React, {useState, memo, useEffect, useCallback, useReducer, useMemo} from \"react\";\nimport api from \"../proxy\";\nimport { STATUS_CODES} from \"../utils/error-status\";\nimport {EVENTS, dispatch} from \"../utils/event\";\nimport {ERROR_TYPE} from \"./Error-message\";\nimport UserActions from \"./User-action\";\nimport ItemActions from \"./Item-action\";\n\nconst TASK_URL = \"/tasks/\";\nconst TYPE_ADD = \"add\";\nconst TYPE_UPDATE = \"update\";\nconst TYPE_REFRESH = \"refresh\";\nconst TYPE_REMOVE = \"remove\";\n\nconst ORDER_DEFAULT = \"none\";\nconst ORDER_ASC = \"asc\";\nconst ORDER_DEC = \"des\";\n\nconst Todo = memo(({username}) => {\n    const tasksURL = useMemo(() => TASK_URL + username, [username])\n    const [filterShowDone, setFilterShowDone] = useState(true);\n    const [order, setOrder] = useState(ORDER_DEFAULT);\n    const itemsReducer = useCallback((state, action) => {\n        const items = action.items;\n        let newState = {};\n        switch (action.type) {\n            case TYPE_ADD:\n            case TYPE_UPDATE:\n                newState = {...state, ...items};\n                break;\n            case TYPE_REFRESH:\n                newState = items;\n                break;\n            case TYPE_REMOVE:\n                const id = action.id;\n                newState = {...state};\n                delete newState[id];\n                break;\n            default:\n                throw new Error();\n        }\n        return newState;\n    }, []);\n    const [items, dispatchItems] = useReducer(itemsReducer, {});\n    const addItem = useCallback((newItem) => {\n        const task = {\n            content: newItem,\n            done: false,\n            timestamp: Date.now()\n        };\n        return api.post(tasksURL, {task}).then(({data})=>{\n            const {taskId} = data;\n            return api.get(tasksURL + \"/\" + taskId);\n        }).then(({data})=>{\n            const {taskId} = data;\n            const items = {\n                [taskId]: data\n            };\n            dispatch(EVENTS.HIDE_ERROR);\n            dispatchItems({type: TYPE_ADD, items});\n        }).catch((response)=>{\n            if (response.status === STATUS_CODES.UNAUTHORIZED || response.status === STATUS_CODES.FORBIDDEN) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.SESSION_ERROR);\n                dispatch(EVENTS.REFRESH);\n            } else if (response.status === STATUS_CODES.NETWORK_ERROR) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.NETWORK_ERROR);\n            } else if (response.status === STATUS_CODES.BAD_RQUEST || response.status === STATUS_CODES.NOT_FOUND) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.TASK_PARAM_ERROR);\n            }\n        });\n    }, [tasksURL]);\n\n    const refreshItems = useCallback(() => {\n        api.get(tasksURL).then(({data}) => {\n            dispatch(EVENTS.HIDE_ERROR);\n            dispatchItems({type: TYPE_REFRESH, items: data});\n        }).catch((response) => {\n            if (response.status === STATUS_CODES.UNAUTHORIZED || response.status === STATUS_CODES.FORBIDDEN) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.SESSION_ERROR);\n                dispatch(EVENTS.REFRESH);\n            } else if (response.status === STATUS_CODES.NETWORK_ERROR) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.NETWORK_ERROR);\n            } else if (response.status === STATUS_CODES.BAD_RQUEST || response.status === STATUS_CODES.NOT_FOUND) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.TASK_PARAM_ERROR);\n            }\n        });\n    }, [tasksURL]);\n\n    const handleCheck = useCallback((done, item) => {\n        const urlWithId = tasksURL + \"/\" + item.taskId;\n        const newItem = {...item, done};\n        api.put(urlWithId, {task: newItem}).then(()=>{\n            dispatch(EVENTS.HIDE_ERROR);\n            dispatchItems({type: TYPE_UPDATE, items:{[item.taskId]: newItem}});\n        }).catch((response)=>{\n            if (response.status === STATUS_CODES.UNAUTHORIZED || response.status === STATUS_CODES.FORBIDDEN) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.SESSION_ERROR);\n                dispatch(EVENTS.REFRESH);\n            } else if (response.status === STATUS_CODES.NETWORK_ERROR) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.NETWORK_ERROR);\n            } else if (response.status === STATUS_CODES.BAD_RQUEST || response.status === STATUS_CODES.NOT_FOUND) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.TASK_PARAM_ERROR);\n            }\n        });\n    }, [tasksURL]);\n\n    const handleDelete = useCallback((id)=>{\n        const urlWithId = tasksURL + \"/\" + id;\n        api.delete(urlWithId).then(()=>{\n            dispatchItems({type: TYPE_REMOVE, id});\n        }).catch((response) => {\n            if (response.status === STATUS_CODES.UNAUTHORIZED || response.status === STATUS_CODES.FORBIDDEN) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.SESSION_ERROR);\n                dispatch(EVENTS.REFRESH);\n            } else if (response.status === STATUS_CODES.NETWORK_ERROR) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.NETWORK_ERROR);\n            } else if (response.status === STATUS_CODES.BAD_RQUEST || response.status === STATUS_CODES.NOT_FOUND) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.TASK_PARAM_ERROR);\n            }\n        });\n    }, [tasksURL]);\n\n    const handleTextChange = useCallback((content, item) => {\n        const urlWithId = tasksURL + \"/\" + item.taskId;\n        const newItem = {...item, content};\n        api.put(urlWithId, {task: newItem}).then(()=>{\n            dispatch(EVENTS.HIDE_ERROR);\n            dispatchItems({type: TYPE_UPDATE, items:{[item.taskId]: newItem}});\n        }).catch((response)=>{\n            if (response.status === STATUS_CODES.UNAUTHORIZED || response.status === STATUS_CODES.FORBIDDEN) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.SESSION_ERROR);\n                dispatch(EVENTS.REFRESH);\n            } else if (response.status === STATUS_CODES.NETWORK_ERROR) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.NETWORK_ERROR);\n            } else if (response.status === STATUS_CODES.BAD_RQUEST || response.status === STATUS_CODES.NOT_FOUND) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.TASK_PARAM_ERROR);\n            }\n        });\n\n    });\n\n    const handleOrderChange = useCallback((event, value) => {\n        const checked = event.target.checked;\n        if (checked) {\n            setOrder(value);\n        }\n    }, []);\n\n    useEffect(()=>{\n        refreshItems();\n    }, [refreshItems]);\n \n    const renderItems = useCallback(() => {\n        let itemsToRender = Object.values(items);\n        if (!filterShowDone) {\n            itemsToRender = itemsToRender.filter((item)=>{\n                return !item.done;\n            });\n        }\n        switch (order) {\n            case ORDER_ASC:\n                itemsToRender.sort((a, b) => {\n                    return a.content.localeCompare(b.content);\n                });\n                break;\n            case ORDER_DEC:\n                itemsToRender.sort((a, b) => {\n                    return b.content.localeCompare(a.content);\n                });\n                break;\n            default:\n                itemsToRender.sort((a, b)=>{\n                    return b.timestamp - a.timestamp;\n                });\n                break;\n        }\n        return itemsToRender.map((item) => {\n            return (<div key={item.taskId} className=\"item\">\n                <input type=\"checkbox\" checked={item.done} onChange={(e)=>{handleCheck(e.target.checked, item)}}/>\n                <input type=\"text\" onChange={(e)=>{handleTextChange(e.target.value, item)}} value={item.content} className={item.done ? \"done\" : \"\"}/>\n                <button onClick={()=>{handleDelete(item.taskId)}} className=\"delete\">delete</button>\n            </div>);\n        });\n    }, [items, handleCheck, filterShowDone, order]);\n\n    return (\n        <div>\n            <div className=\"options\">\n                <div className=\"filters\">\n                    <label htmlFor=\"filter\">Hide done tasks:</label>\n                    <input name=\"filter\" type=\"checkbox\" checked={!filterShowDone} onChange={(e)=>setFilterShowDone(!e.target.checked)}/>\n                </div>\n                <div className=\"orders\">\n                    <span>Order:</span>\n                    <input type=\"radio\" name=\"order\" value=\"none\" checked={order === ORDER_DEFAULT} onChange={(e)=>{handleOrderChange(e, ORDER_DEFAULT)}}/>\n                    <label htmlFor=\"none\">Latest</label>\n                    <input type=\"radio\" name=\"order\" value=\"asc\" checked={order === ORDER_ASC} onChange={(e)=>{handleOrderChange(e, ORDER_ASC)}}/>\n                    <label htmlFor=\"asc\">A-Z</label>\n                    <input type=\"radio\" name=\"order\" value=\"dec\" checked={order === ORDER_DEC} onChange={(e)=>{handleOrderChange(e, ORDER_DEC)}}/>\n                    <label htmlFor=\"dec\">Z-A</label>\n                </div>\n            </div>\n            <div className=\"items\">\n                {renderItems()}\n            </div>\n            <ItemActions refreshItems={refreshItems} addItem={addItem}></ItemActions>\n            <UserActions username={username}></UserActions>\n        </div>\n    );\n});\n\nexport default Todo;","import React, {useState, memo, useEffect, useCallback} from \"react\";\nimport { EVENTS, addEventListener, removeEventListener, dispatch } from \"../utils/event\"\nimport api from \"../proxy\";\nimport ErrorMessage, {ERROR_TYPE} from \"./Error-message\";\nimport { STATUS_CODES } from \"../utils/error-status\";\nimport Login from \"./Login\";\nimport Todo from \"./Todo\";\nimport { DEFAULT_THEME } from \"../theme-context\";\n\nconst SESSION_URL = \"/session\";\n\nconst Main = memo(() => {\n    const [userName, setUsername] = useState(\"\");\n    const refreshPage = useCallback(() => {\n        api.get(SESSION_URL).then(({data})=>{\n            const {username, theme} = data;\n            setUsername(username);\n            dispatch(EVENTS.HIDE_ERROR);\n            dispatch(EVENTS.SET_THEME, theme);\n        }).catch((response) => {\n            setUsername(\"\");\n            if (response.status !== STATUS_CODES.UNAUTHORIZED) {\n                dispatch(EVENTS.DISPLAY_ERROR, ERROR_TYPE.NETWORK_ERROR);\n            }\n            dispatch(EVENTS.SET_THEME, DEFAULT_THEME);\n        });\n        }, [setUsername]);\n    useEffect(() => {\n        refreshPage();\n        addEventListener(EVENTS.REFRESH, refreshPage);\n        return () => {\n            removeEventListener(EVENTS.REFRESH, refreshPage);\n        };\n    }, [refreshPage])\n    return (<div id=\"stage\">\n        <ErrorMessage></ErrorMessage>\n        {userName === \"\" ? <Login></Login> : <Todo username={userName}></Todo>}\n    </div>);\n});\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from \"./pages/Main\";\nimport { useState, useEffect } from 'react';\nimport { EVENTS, addEventListener, removeEventListener } from './utils/event';\nimport ThemeContext, {DEFAULT_THEME, LIGHT_THEME} from \"./theme-context\";\n\nconst THEME_SUFFIX = \"-theme\";\nfunction App() {\n  const [theme, setTheme] = useState(DEFAULT_THEME);\n  useEffect(() => {\n    const changeTheme = (theme) => {\n      if (theme !== LIGHT_THEME) {\n        theme = DEFAULT_THEME;\n      }\n      setTheme(theme);\n    };\n    addEventListener(EVENTS.SET_THEME, changeTheme);\n    return () => {\n      removeEventListener(EVENTS.SET_THEME, changeTheme);\n    };\n  }, [setTheme])\n  return (\n    <ThemeContext.Provider value={{theme}}>\n      <div className={`${theme+THEME_SUFFIX} App`}>\n        <header>\n            <h2>TODO APP</h2>\n        </header>\n        <main>\n          <Main></Main>\n        </main>\n        <footer>\n            <ul className=\"footer-personal-info\">\n                <li>© 2020 Yiji Huang</li>\n                <li className=\"footer-divider\"></li>\n                <li>\n                    <span>E-mail: </span>\n                    <a href=\"mailto:huang.yiji@husky.neu.edu\">huang.yiji@husky.neu.edu</a>\n                </li>\n            </ul>\n        </footer>\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}